-- introspection mock for "uses built-in scalars when possible" test case
-- ROBLOX REMOVEME: remove the file when introspectionFromSchema is implemented

local introspectionObj = {
	__schema = {
		description = nil,
		queryType = {
			name = "Query",
		},
		mutationType = nil,
		subscriptionType = nil,
		types = {
			{
				kind = "SCALAR",
				name = "CustomScalar",
				description = nil,
				specifiedByUrl = nil,
				fields = nil,
				inputFields = nil,
				interfaces = nil,
				enumValues = nil,
				possibleTypes = nil,
			},
			{
				kind = "OBJECT",
				name = "Query",
				description = nil,
				specifiedByUrl = nil,
				fields = {
					{
						name = "int",
						description = nil,
						args = {},
						type = {
							kind = "SCALAR",
							name = "Int",
							ofType = nil,
						},
						isDeprecated = false,
						deprecationReason = nil,
					},
					{
						name = "float",
						description = nil,
						args = {},
						type = {
							kind = "SCALAR",
							name = "Float",
							ofType = nil,
						},
						isDeprecated = false,
						deprecationReason = nil,
					},
					{
						name = "string",
						description = nil,
						args = {},
						type = {
							kind = "SCALAR",
							name = "String",
							ofType = nil,
						},
						isDeprecated = false,
						deprecationReason = nil,
					},
					{
						name = "boolean",
						description = nil,
						args = {},
						type = {
							kind = "SCALAR",
							name = "Boolean",
							ofType = nil,
						},
						isDeprecated = false,
						deprecationReason = nil,
					},
					{
						name = "id",
						description = nil,
						args = {},
						type = {
							kind = "SCALAR",
							name = "ID",
							ofType = nil,
						},
						isDeprecated = false,
						deprecationReason = nil,
					},
					{
						name = "custom",
						description = nil,
						args = {},
						type = {
							kind = "SCALAR",
							name = "CustomScalar",
							ofType = nil,
						},
						isDeprecated = false,
						deprecationReason = nil,
					},
				},
				inputFields = nil,
				interfaces = {},
				enumValues = nil,
				possibleTypes = nil,
			},
			{
				kind = "SCALAR",
				name = "Int",
				description = "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
				specifiedByUrl = nil,
				fields = nil,
				inputFields = nil,
				interfaces = nil,
				enumValues = nil,
				possibleTypes = nil,
			},
			{
				kind = "SCALAR",
				name = "Float",
				description = "The `Float` scalar type represents signed double-precision fractional values as specified by {IEEE 754}(https =//en.wikipedia.org/wiki/IEEE_floating_point).",
				specifiedByUrl = nil,
				fields = nil,
				inputFields = nil,
				interfaces = nil,
				enumValues = nil,
				possibleTypes = nil,
			},
			{
				kind = "SCALAR",
				name = "String",
				description = "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
				specifiedByUrl = nil,
				fields = nil,
				inputFields = nil,
				interfaces = nil,
				enumValues = nil,
				possibleTypes = nil,
			},
			{
				kind = "SCALAR",
				name = "Boolean",
				description = "The `Boolean` scalar type represents `true` or `false`.",
				specifiedByUrl = nil,
				fields = nil,
				inputFields = nil,
				interfaces = nil,
				enumValues = nil,
				possibleTypes = nil,
			},
			{
				kind = "SCALAR",
				name = "ID",
				description = "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.",
				specifiedByUrl = nil,
				fields = nil,
				inputFields = nil,
				interfaces = nil,
				enumValues = nil,
				possibleTypes = nil,
			},
			table.unpack(require(script.Parent["buildClientSchema.roblox.introspectionCommonTypes"]).allCommon),
		},
		directives = {
			{
				name = "include",
				description = "Directs the executor to include this field or fragment only when the `if` argument is true.",
				isRepeatable = false,
				locations = {
					"FIELD",
					"FRAGMENT_SPREAD",
					"INLINE_FRAGMENT",
				},
				args = {
					{
						name = "if",
						description = "Included when true.",
						type = {
							kind = "NON_NULL",
							name = nil,
							ofType = {
								kind = "SCALAR",
								name = "Boolean",
								ofType = nil,
							},
						},
						defaultValue = nil,
						isDeprecated = false,
						deprecationReason = nil,
					},
				},
			},
			{
				name = "skip",
				description = "Directs the executor to skip this field or fragment when the `if` argument is true.",
				isRepeatable = false,
				locations = {
					"FIELD",
					"FRAGMENT_SPREAD",
					"INLINE_FRAGMENT",
				},
				args = {
					{
						name = "if",
						description = "Skipped when true.",
						type = {
							kind = "NON_NULL",
							name = nil,
							ofType = {
								kind = "SCALAR",
								name = "Boolean",
								ofType = nil,
							},
						},
						defaultValue = nil,
						isDeprecated = false,
						deprecationReason = nil,
					},
				},
			},
			{
				name = "deprecated",
				description = "Marks an element of a GraphQL schema as no longer supported.",
				isRepeatable = false,
				locations = {
					"FIELD_DEFINITION",
					"ARGUMENT_DEFINITION",
					"INPUT_FIELD_DEFINITION",
					"ENUM_VALUE",
				},
				args = {
					{
						name = "reason",
						description = "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by {CommonMark}(https =//commonmark.org/).",
						type = {
							kind = "SCALAR",
							name = "String",
							ofType = nil,
						},
						defaultValue = "\"No longer supported\"",
						isDeprecated = false,
						deprecationReason = nil,
					},
				},
			},
			{
				name = "specifiedBy",
				description = "Exposes a URL that specifies the behaviour of this scalar.",
				isRepeatable = false,
				locations = {
					"SCALAR",
				},
				args = {
					{
						name = "url",
						description = "The URL that specifies the behaviour of this scalar.",
						type = {
							kind = "NON_NULL",
							name = nil,
							ofType = {
								kind = "SCALAR",
								name = "String",
								ofType = nil,
							},
						},
						defaultValue = nil,
						isDeprecated = false,
						deprecationReason = nil,
					},
				},
			},
		},
	},
}

return introspectionObj
